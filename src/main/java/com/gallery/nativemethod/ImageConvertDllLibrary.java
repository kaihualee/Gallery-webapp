package com.gallery.nativemethod;
import org.bridj.BridJ;
import org.bridj.CRuntime;
import org.bridj.Pointer;
import org.bridj.ann.Convention.Style;
import org.bridj.ann.Convention;
import org.bridj.ann.Library;
import org.bridj.ann.Ptr;
import org.bridj.ann.Runtime;
/**
 * Wrapper for library <b>ImageConvertDll</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("ImageConvertDll") 
@Runtime(CRuntime.class) 
public class ImageConvertDllLibrary {
	static {
		BridJ.register();
	}
	/**
	 * Original signature : <code>int convertImage(char*, char*)</code><br>
	 * <i>native declaration : ImageConvertDll.h:27</i>
	 */
	@Convention(Convention.Style.StdCall) 
	public static int convertImage(Pointer<Byte > srcImageName, Pointer<Byte > destImageName) {
		return convertImage(Pointer.getPeer(srcImageName), Pointer.getPeer(destImageName));
	}
	@Convention(Convention.Style.StdCall) 
	protected native static int convertImage(@Ptr long srcImageName, @Ptr long destImageName);
	/**
	 * Original signature : <code>int convertImage2(char*, char*, int)</code><br>
	 * <i>native declaration : ImageConvertDll.h:29</i>
	 */
	@Convention(Convention.Style.StdCall) 
	public static int convertImage2(Pointer<Byte > srcImageName, Pointer<Byte > destImageName, int matchType) {
		return convertImage2(Pointer.getPeer(srcImageName), Pointer.getPeer(destImageName), matchType);
	}
	@Convention(Convention.Style.StdCall) 
	protected native static int convertImage2(@Ptr long srcImageName, @Ptr long destImageName, int matchType);
	/**
	 * Original signature : <code>int convertImage3(char*, char*, int, char*)</code><br>
	 * <i>native declaration : ImageConvertDll.h:31</i>
	 */
	@Convention(Convention.Style.StdCall) 
	public static int convertImage3(Pointer<Byte > srcImageName, Pointer<Byte > destImageName, int matchType, Pointer<Byte > outImageName) {
		return convertImage3(Pointer.getPeer(srcImageName), Pointer.getPeer(destImageName), matchType, Pointer.getPeer(outImageName));
	}
	@Convention(Convention.Style.StdCall) 
	protected native static int convertImage3(@Ptr long srcImageName, @Ptr long destImageName, int matchType, @Ptr long outImageName);
	/**
	 * Original signature : <code>int getColorNum(char*)</code><br>
	 * <i>native declaration : ImageConvertDll.h:33</i>
	 */
	@Convention(Convention.Style.StdCall) 
	public static int getColorNum(Pointer<Byte > imageName) {
		return getColorNum(Pointer.getPeer(imageName));
	}
	@Convention(Convention.Style.StdCall) 
	protected native static int getColorNum(@Ptr long imageName);
	/**
	 * Original signature : <code>int getColorTheme(char*, BYTE*, BYTE*, BYTE*, double*)</code><br>
	 * <i>native declaration : ImageConvertDll.h:35</i>
	 */
	@Convention(Convention.Style.StdCall) 
	public static int getColorTheme(Pointer<Byte > imageName, Pointer<Byte > r, Pointer<Byte > g, Pointer<Byte > b, Pointer<Double > percentage) {
		return getColorTheme(Pointer.getPeer(imageName), Pointer.getPeer(r), Pointer.getPeer(g), Pointer.getPeer(b), Pointer.getPeer(percentage));
	}
	@Convention(Convention.Style.StdCall) 
	protected native static int getColorTheme(@Ptr long imageName, @Ptr long r, @Ptr long g, @Ptr long b, @Ptr long percentage);
	/**
	 * Original signature : <code>int convertByUserDefine(char*, char*, int, int*, int*)</code><br>
	 * <i>native declaration : ImageConvertDll.h:37</i>
	 */
	@Convention(Convention.Style.StdCall) 
	public static int convertByUserDefine(Pointer<Byte > srcImageName, Pointer<Byte > destImageName, int linkNum, Pointer<Integer > srcIndex, Pointer<Integer > destIndex) {
		return convertByUserDefine(Pointer.getPeer(srcImageName), Pointer.getPeer(destImageName), linkNum, Pointer.getPeer(srcIndex), Pointer.getPeer(destIndex));
	}
	@Convention(Convention.Style.StdCall) 
	protected native static int convertByUserDefine(@Ptr long srcImageName, @Ptr long destImageName, int linkNum, @Ptr long srcIndex, @Ptr long destIndex);
	/**
	 * Original signature : <code>int convertByUserDefine3(char*, char*, int, int*, int*, char*)</code><br>
	 * <i>native declaration : ImageConvertDll.h:39</i>
	 */
	@Convention(Convention.Style.StdCall) 
	public static int convertByUserDefine3(Pointer<Byte > srcImageName, Pointer<Byte > destImageName, int linkNum, Pointer<Integer > srcIndex, Pointer<Integer > destIndex, Pointer<Byte > outImageName) {
		return convertByUserDefine3(Pointer.getPeer(srcImageName), Pointer.getPeer(destImageName), linkNum, Pointer.getPeer(srcIndex), Pointer.getPeer(destIndex), Pointer.getPeer(outImageName));
	}
	@Convention(Convention.Style.StdCall) 
	protected native static int convertByUserDefine3(@Ptr long srcImageName, @Ptr long destImageName, int linkNum, @Ptr long srcIndex, @Ptr long destIndex, @Ptr long outImageName);
	/** Undefined type */
	public static interface RGBQUAD {
		
	};
}
